// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id             Int            @id @default(autoincrement())
  title          String
  content        String
  image          String?
  likeCount      Int?           @default(10)
  ArticleComment Comment[]
  userId         Int?
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  ArticleLikes   ArticleLikes[]
}

model Product {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  price          Int
  tags           String[]
  images         String[]
  ProductComment Comment[]
  userId         Int?
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  likeCount      Int?           @default(0)
  ProductLikes   ProductLikes[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  nickname     String
  image        String?
  password     String
  refreshToken String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Product      Product[]
  Article      Article[]
  Comment      Comment[]
  ProductLikes ProductLikes[]
  ArticleLikes ArticleLikes[]
}

model ProductLikes {
  id        Int      @id @default(autoincrement())
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model ArticleLikes {
  id        Int      @id @default(autoincrement())
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
