// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  image         String?
  comments      Comment[]
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  likes         Like[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  price         Int
  tags          String[]
  images        String[]
  comments      Comment[]
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  favorites     Favorite[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  nickname      String
  image         String?
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  articles      Article[]
  products      Product[]
  comments      Comment[]
  favorites     Favorite[]
  likes         Like[]
  notifications Notification[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  status    Boolean  @default(false)
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  Article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?
  createdAt DateTime @default(now())
}
